<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ticketing_api</name>
    </assembly>
    <members>
        <member name="M:ticketing_api.Controllers.AccountsController.ForgotPassword(ticketing_api.Models.ForgotPasswordModel)">
            <summary>
             Generate token and send link to user's email so that user can reset password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.AccountsController.ResetPassword(ticketing_api.Models.ResetPasswordModel)">
            <summary>
                Resets password for current user with token that is generated by forgot password method
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.AccountsController.Token(ticketing_api.Controllers.AccountsController.TokenModel)">
            <summary>
            for getting the username from token in reset password functionality
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.MarketTaxesController.GetMarketTaxByMarketId(System.Int32)">
            <summary>
            Get markettax based on market filter
            </summary>
            <param name="marketId">market id</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.OrdersController.PostOrderTicketAsync(System.Int32)">
            <summary>
            Create Ticket from Order. This will update Order status.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.RigLocationsController.Filter(System.Int32)">
            <summary>
            Get riglocation based on customer filter
            </summary>
            <param name="customerId">customer id</param>
            <returns></returns>
        </member>
        <member name="T:ticketing_api.Controllers.RolesController">
            <summary>
            Roles management as far as permissions
            </summary>
        </member>
        <member name="T:ticketing_api.Controllers.ShippingPapersController">
            <summary>
            Manage shipping paper content
            </summary>
        </member>
        <member name="T:ticketing_api.Controllers.TicketsController">
            <summary>
            Tickets
            </summary>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PostInternalNotes(System.Int32,ticketing_api.Controllers.TicketsController.InternalNotesForm)">
            <summary>
            Append to existing InternalNotes for ticket
            </summary>
            <param name="id"></param>
            <param name="internalNotesForm"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PutInternalNotes(System.Int32,ticketing_api.Controllers.TicketsController.InternalNotesForm)">
            <summary>
            Overwrite existing InternalNotes for ticket
            </summary>
            <param name="id"></param>
            <param name="internalNotesForm"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetTicketsAsync(Sieve.Models.SieveModel)">
            <param name="sieveModel"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PostTicketOrder(System.Int32)">
            <summary>
            Change Ticket back to order
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.VoidTicket(System.Int32)">
            <summary>
            Void ticket
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetShippingPaper(System.Int32,System.Decimal,System.String)">
            <summary>
            Generate shipping paper pdf for ticket and return pdf in response
            </summary>
            <param name="id">ticket id</param>
            <param name="startingGallons"></param>
            <param name="paperSize"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetShippingPaperUrl(System.Int32,System.Decimal,System.String)">
            <summary>
            Generate shipping paper pdf for ticket and return path in response
            </summary>
            <param name="id">ticket id</param>
            <param name="startingGallons"></param>
            <param name="paperSize"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetShippingPaperImage(System.Int32)">
            <summary>
            Get image of printed shipping paper
            </summary>
            <param name="id">ticket id</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PostShippingPaperImageAsync(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            post image of printed shipping paper
            </summary>
            <param name="id">ticket id</param>
            <param name="file">image file</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetTicketPaper(System.Int32,System.Decimal,System.String)">
            <summary>
            Generate pdf and return the pdf data as the response
            </summary>
            <param name="id"></param>
            <param name="startingGallons"></param>
            <param name="paperSize"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetTicketPaperUrl(System.Int32,System.Decimal,System.String)">
            <summary>
            Generate pdf and return link to access the pdf
            </summary>
            <param name="id"></param>
            <param name="startingGallons"></param>
            <param name="paperSize"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetTicketPaperImage(System.Int32)">
            <summary>
            Get image of printed ticket paper
            </summary>
            <param name="id">ticket id</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PostTicketPaperImageAsync(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            post image of printed ticket paper
            </summary>
            <param name="id">ticket id</param>
            <param name="file">image file</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.GetTicketProductsAsync(System.Int32)">
            <summary>
            Get list of products for ticket
            </summary>
            <param name="id">ticket Id</param> 
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PostTicketProductAsync(System.Int32,System.Collections.Generic.List{ticketing_api.Models.TicketProduct})">
            <summary>
            Add products to ticket
            </summary>
            <param name="id">ticketId</param>
            <param name="ticketProducts"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.PutTicketProductsAsync(System.Int32,System.Collections.Generic.List{ticketing_api.Models.TicketProduct})">
            <summary>
            Update an array of products for a ticket
            </summary>
            <param name="id"></param>
            <param name="ticketProducts"> list of the products to update</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.TicketsController.DeleteTicketProductAsync(System.Int32,System.Int32)">
            <summary>
            Delete  ticket product from ticket
            </summary>
            <param name="id"></param>
            <param name="ticketProductId"></param>
            <returns></returns>
        </member>
        <member name="T:ticketing_api.Controllers.TicketPapersController">
            <summary>
            Manage ticket paper content
            </summary>
        </member>
        <member name="M:ticketing_api.Controllers.UserController.Create(ticketing_api.Models.AppUser)">
            <summary>
            Create new user from user management UI
            </summary>
            <param name="appUser"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Controllers.WellsController.Filter(System.Int32)">
            <summary>
            Get well based on rig filter
            </summary>
            <param name="rigLocationId">rigLocation id</param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Data.ApplicationDbContext.AuditEntities">
            <summary>
            Method that will set the Audit properties for every added or modified Entity marked with the 
            IAuditable interface.
            </summary>
        </member>
        <member name="M:ticketing_api.Infrastructure.Identity.ApplicationUserManager.CreateUserAsync(System.String,System.String,System.String,System.String)">
            <param name="username"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:ticketing_api.Infrastructure.Identity.ApplicationUserManager.ChangePasswordAsync(System.String,System.String,System.String)">
            <summary>
            Update the password for the user.
            </summary>
        </member>
    </members>
</doc>
