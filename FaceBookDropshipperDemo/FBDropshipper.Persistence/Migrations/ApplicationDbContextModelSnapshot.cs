// <auto-generated />
using System;
using FBDropshipper.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FBDropshipper.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FBDropshipper.Domain.Entities.AppTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<double>("Fee")
                        .HasColumnType("double precision")
                        .HasColumnName("fee");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fromDate");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invoiceDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StripePaymentId")
                        .HasColumnType("text")
                        .HasColumnName("stripePaymentId");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text")
                        .HasColumnName("stripeSubscriptionId");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("toDate");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_appTransactions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_appTransactions_userId");

                    b.ToTable("appTransactions", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanBeDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("canBeDeleted");

                    b.Property<int>("CatalogType")
                        .HasColumnType("integer")
                        .HasColumnName("catalogType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int?>("MarketPlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceId");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_catalogs");

                    b.HasIndex("MarketPlaceId")
                        .HasDatabaseName("iX_catalogs_marketPlaceId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_catalogs_userId");

                    b.ToTable("catalogs", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.CatalogProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Json")
                        .HasColumnType("text")
                        .HasColumnName("json");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("SkuCode")
                        .HasColumnType("text")
                        .HasColumnName("skuCode");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<int>("StockStatus")
                        .HasColumnType("integer")
                        .HasColumnName("stockStatus");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pK_catalogProducts");

                    b.HasIndex("CatalogId")
                        .HasDatabaseName("iX_catalogProducts_catalogId");

                    b.ToTable("catalogProducts", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.CatalogProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogProductId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogProductId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pK_catalogProductImages");

                    b.HasIndex("CatalogProductId")
                        .HasDatabaseName("iX_catalogProductImages_catalogProductId");

                    b.ToTable("catalogProductImages", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer")
                        .HasColumnName("categoryType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.InventoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogId");

                    b.Property<int>("CatalogProductId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogProductId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsTracking")
                        .HasColumnType("boolean")
                        .HasColumnName("isTracking");

                    b.Property<int?>("MarketPlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceId");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("SkuCode")
                        .HasColumnType("text")
                        .HasColumnName("skuCode");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<int>("StockStatus")
                        .HasColumnType("integer")
                        .HasColumnName("stockStatus");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pK_inventoryProducts");

                    b.HasIndex("CatalogId")
                        .HasDatabaseName("iX_inventoryProducts_catalogId");

                    b.HasIndex("CatalogProductId")
                        .HasDatabaseName("iX_inventoryProducts_catalogProductId");

                    b.HasIndex("MarketPlaceId")
                        .HasDatabaseName("iX_inventoryProducts_marketPlaceId");

                    b.ToTable("inventoryProducts", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.InventoryProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<int>("InventoryProductId")
                        .HasColumnType("integer")
                        .HasColumnName("inventoryProductId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pK_inventoryProductImages");

                    b.HasIndex("InventoryProductId")
                        .HasDatabaseName("iX_inventoryProductImages_inventoryProductId");

                    b.ToTable("inventoryProductImages", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ListingTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("integer")
                        .HasColumnName("deliveryMethod");

                    b.Property<string>("Header")
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceId");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("ProfitPercent")
                        .HasColumnType("real")
                        .HasColumnName("profitPercent");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<float>("ShippingRate")
                        .HasColumnType("real")
                        .HasColumnName("shippingRate");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_listingTemplates");

                    b.HasIndex("MarketPlaceId")
                        .HasDatabaseName("iX_listingTemplates_marketPlaceId");

                    b.ToTable("listingTemplates", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.MarketPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int>("MarketPlaceType")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceType");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamId");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_marketPlaces");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("iX_marketPlaces_teamId");

                    b.ToTable("marketPlaces", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<double>("Fee")
                        .HasColumnType("double precision")
                        .HasColumnName("fee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceId");

                    b.Property<string>("OrderId")
                        .HasColumnType("text")
                        .HasColumnName("orderId");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("orderStatus");

                    b.Property<string>("OrderUrl")
                        .HasColumnType("text")
                        .HasColumnName("orderUrl");

                    b.Property<int>("ProductListingId")
                        .HasColumnType("integer")
                        .HasColumnName("productListingId");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<double>("Shipping")
                        .HasColumnType("double precision")
                        .HasColumnName("shipping");

                    b.Property<double>("SubTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("subTotal");

                    b.Property<double>("SupplierCost")
                        .HasColumnType("double precision")
                        .HasColumnName("supplierCost");

                    b.Property<string>("SupplierOrderId")
                        .HasColumnType("text")
                        .HasColumnName("supplierOrderId");

                    b.Property<int>("TrackingCarrier")
                        .HasColumnType("integer")
                        .HasColumnName("trackingCarrier");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text")
                        .HasColumnName("trackingNumber");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_orders");

                    b.HasIndex("MarketPlaceId")
                        .HasDatabaseName("iX_orders_marketPlaceId");

                    b.HasIndex("ProductListingId")
                        .HasDatabaseName("iX_orders_productListingId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ProductListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("categoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("integer")
                        .HasColumnName("deliveryMethod");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Header")
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<int>("InventoryProductId")
                        .HasColumnType("integer")
                        .HasColumnName("inventoryProductId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("ListedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("listedAt");

                    b.Property<string>("ListingId")
                        .HasColumnType("text")
                        .HasColumnName("listingId");

                    b.Property<int>("ListingStatus")
                        .HasColumnType("integer")
                        .HasColumnName("listingStatus");

                    b.Property<int?>("ListingTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("listingTemplateId");

                    b.Property<string>("ListingUrl")
                        .HasColumnType("text")
                        .HasColumnName("listingUrl");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceId");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<double>("ShippingRate")
                        .HasColumnType("double precision")
                        .HasColumnName("shippingRate");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_productListings");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("iX_productListings_categoryId");

                    b.HasIndex("InventoryProductId")
                        .HasDatabaseName("iX_productListings_inventoryProductId");

                    b.HasIndex("ListingTemplateId")
                        .HasDatabaseName("iX_productListings_listingTemplateId");

                    b.HasIndex("MarketPlaceId")
                        .HasDatabaseName("iX_productListings_marketPlaceId");

                    b.ToTable("productListings", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ProductListingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("ProductListingId")
                        .HasColumnType("integer")
                        .HasColumnName("productListingId");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pK_productListingImages");

                    b.HasIndex("ProductListingId")
                        .HasDatabaseName("iX_productListingImages_productListingId");

                    b.ToTable("productListingImages", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencyStamp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedName");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_AspNetRoles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleId");

                    b.HasKey("Id")
                        .HasName("pK_AspNetRoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_AspNetRoleClaims_roleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("StripePriceId")
                        .HasColumnType("text")
                        .HasColumnName("stripePriceId");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("text")
                        .HasColumnName("stripeProductId");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("integer")
                        .HasColumnName("subscriptionType");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TotalMarketPlace")
                        .HasColumnType("integer")
                        .HasColumnName("totalMarketPlace");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("integer")
                        .HasColumnName("totalProducts");

                    b.Property<int>("TotalTeamMembers")
                        .HasColumnType("integer")
                        .HasColumnName("totalTeamMembers");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id")
                        .HasName("pK_subscriptions");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_teams");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_teams_userId");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.TeamMember", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamId");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<bool>("CanLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("canLogin");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("TeamId", "UserId")
                        .HasName("pK_teamMembers");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("iX_teamMembers_userId");

                    b.ToTable("teamMembers", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.TeamMemberPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<int>("MarketPlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("marketPlaceId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("UserId", "MarketPlaceId")
                        .HasName("pK_teamMemberPermission");

                    b.HasIndex("MarketPlaceId")
                        .HasDatabaseName("iX_teamMemberPermission_marketPlaceId");

                    b.ToTable("teamMemberPermission", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencyStamp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailConfirmed");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("fullName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("isEnabled");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_AspNetUsers");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserCard", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<string>("CardName")
                        .HasColumnType("text")
                        .HasColumnName("cardName");

                    b.Property<int>("CardType")
                        .HasColumnType("integer")
                        .HasColumnName("cardType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiryDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastDigits")
                        .HasColumnType("text")
                        .HasColumnName("lastDigits");

                    b.Property<string>("StripeToken")
                        .HasColumnType("text")
                        .HasColumnName("stripeToken");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.HasKey("UserId")
                        .HasName("pK_userCards");

                    b.ToTable("userCards", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_AspNetUserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_AspNetUserClaims_userId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("isRead");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("readDate");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_userNotifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_userNotifications_userId");

                    b.ToTable("userNotifications", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pK_AspNetUserRoles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_AspNetUserRoles_roleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<bool>("CanCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("canCancel");

                    b.Property<bool>("CanExpire")
                        .HasColumnType("boolean")
                        .HasColumnName("canExpire");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelledDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("currentPeriodEnd");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("currentPeriodStart");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("isCancelled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StripePriceId")
                        .HasColumnType("text")
                        .HasColumnName("stripePriceId");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text")
                        .HasColumnName("stripeSubscriptionId");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscriptionId");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text")
                        .HasColumnName("subscriptionType");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedDate");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_userSubscriptions");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("iX_userSubscriptions_subscriptionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_userSubscriptions_userId");

                    b.ToTable("userSubscriptions", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("providerKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pK_AspNetUserLogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_AspNetUserLogins_userId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginProvider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pK_AspNetUserTokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clientId");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("clientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("consentType");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("displayName");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("displayNames");

                    b.Property<string>("Permissions")
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("postLogoutRedirectUris");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text")
                        .HasColumnName("redirectUris");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictApplications");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictApplications_clientId");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text")
                        .HasColumnName("applicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationDate");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictAuthorizations");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("iX_OpenIddictAuthorizations_applicationId_status_subject_type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("displayName");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text")
                        .HasColumnName("displayNames");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("text")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictScopes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictScopes_name");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text")
                        .HasColumnName("applicationId");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text")
                        .HasColumnName("authorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationDate");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("redemptionDate");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("referenceId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictTokens");

                    b.HasIndex("AuthorizationId")
                        .HasDatabaseName("iX_OpenIddictTokens_authorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictTokens_referenceId");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("iX_OpenIddictTokens_applicationId_status_subject_type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.AppTransaction", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("AppTransactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_appTransactions_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Catalog", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.MarketPlace", "MarketPlace")
                        .WithMany("Catalogs")
                        .HasForeignKey("MarketPlaceId")
                        .HasConstraintName("fK_catalogs_marketPlaces_marketPlaceId");

                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("Catalogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_catalogs_users_userId");

                    b.Navigation("MarketPlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.CatalogProduct", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Catalog", "Catalog")
                        .WithMany("CatalogProducts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_catalogProducts_catalogs_catalogId");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.CatalogProductImage", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.CatalogProduct", "CatalogProduct")
                        .WithMany("CatalogProductImages")
                        .HasForeignKey("CatalogProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_catalogProductImages_catalogProducts_catalogProductId");

                    b.Navigation("CatalogProduct");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.InventoryProduct", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Catalog", null)
                        .WithMany("InventoryProducts")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("fK_inventoryProducts_catalogs_catalogId");

                    b.HasOne("FBDropshipper.Domain.Entities.CatalogProduct", "CatalogProduct")
                        .WithMany("InventoryProducts")
                        .HasForeignKey("CatalogProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_inventoryProducts_catalogProducts_catalogProductId");

                    b.HasOne("FBDropshipper.Domain.Entities.MarketPlace", "MarketPlace")
                        .WithMany("InventoryProducts")
                        .HasForeignKey("MarketPlaceId")
                        .HasConstraintName("fK_inventoryProducts_marketPlaces_marketPlaceId");

                    b.Navigation("CatalogProduct");

                    b.Navigation("MarketPlace");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.InventoryProductImage", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.InventoryProduct", "InventoryProduct")
                        .WithMany("InventoryProductImages")
                        .HasForeignKey("InventoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_inventoryProductImages_inventoryProducts_inventoryProductId");

                    b.Navigation("InventoryProduct");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ListingTemplate", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.MarketPlace", "MarketPlace")
                        .WithMany("ListingTemplates")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_listingTemplates_marketPlaces_marketPlaceId");

                    b.Navigation("MarketPlace");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.MarketPlace", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Team", "Team")
                        .WithMany("MarketPlaces")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_marketPlaces_teams_teamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Order", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.MarketPlace", "MarketPlace")
                        .WithMany("Orders")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_orders_marketPlaces_marketPlaceId");

                    b.HasOne("FBDropshipper.Domain.Entities.ProductListing", "ProductListing")
                        .WithMany("Orders")
                        .HasForeignKey("ProductListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_orders_productListings_productListingId");

                    b.Navigation("MarketPlace");

                    b.Navigation("ProductListing");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ProductListing", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Category", "Category")
                        .WithMany("ProductLists")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fK_productListings_categories_categoryId");

                    b.HasOne("FBDropshipper.Domain.Entities.InventoryProduct", "InventoryProduct")
                        .WithMany("ProductLists")
                        .HasForeignKey("InventoryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_productListings_inventoryProducts_inventoryProductId");

                    b.HasOne("FBDropshipper.Domain.Entities.ListingTemplate", "ListingTemplate")
                        .WithMany("ProductLists")
                        .HasForeignKey("ListingTemplateId")
                        .HasConstraintName("fK_productListings_listingTemplates_listingTemplateId");

                    b.HasOne("FBDropshipper.Domain.Entities.MarketPlace", "MarketPlace")
                        .WithMany("ProductLists")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_productListings_marketPlaces_marketPlaceId");

                    b.Navigation("Category");

                    b.Navigation("InventoryProduct");

                    b.Navigation("ListingTemplate");

                    b.Navigation("MarketPlace");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ProductListingImage", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.ProductListing", "ProductListing")
                        .WithMany("ProductListingImages")
                        .HasForeignKey("ProductListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_productListingImages_productListings_productListingId");

                    b.Navigation("ProductListing");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetRoleClaims_AspNetRoles_roleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Team", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_teams_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_teamMembers_teams_teamId");

                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithOne("TeamMember")
                        .HasForeignKey("FBDropshipper.Domain.Entities.TeamMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_teamMembers_users_userId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.TeamMemberPermission", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.MarketPlace", "MarketPlace")
                        .WithMany("TeamMemberPermissions")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_teamMemberPermission_marketPlaces_marketPlaceId");

                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("TeamMemberPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_teamMemberPermission_users_userId");

                    b.Navigation("MarketPlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserCard", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithOne("UserCard")
                        .HasForeignKey("FBDropshipper.Domain.Entities.UserCard", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_userCards_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserClaims_AspNetUsers_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_userNotifications_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserRoles_AspNetRoles_roleId");

                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserRoles_AspNetUsers_userId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.Subscription", "Subscription")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_userSubscriptions_subscriptions_subscriptionId");

                    b.HasOne("FBDropshipper.Domain.Entities.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_userSubscriptions_users_userId");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserLogins_AspNetUsers_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FBDropshipper.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserTokens_AspNetUsers_userId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fK_OpenIddictAuthorizations_OpenIddictApplications_application~");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fK_OpenIddictTokens_OpenIddictApplications_applicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fK_OpenIddictTokens_OpenIddictAuthorizations_authorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogProducts");

                    b.Navigation("InventoryProducts");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.CatalogProduct", b =>
                {
                    b.Navigation("CatalogProductImages");

                    b.Navigation("InventoryProducts");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductLists");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.InventoryProduct", b =>
                {
                    b.Navigation("InventoryProductImages");

                    b.Navigation("ProductLists");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ListingTemplate", b =>
                {
                    b.Navigation("ProductLists");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.MarketPlace", b =>
                {
                    b.Navigation("Catalogs");

                    b.Navigation("InventoryProducts");

                    b.Navigation("ListingTemplates");

                    b.Navigation("Orders");

                    b.Navigation("ProductLists");

                    b.Navigation("TeamMemberPermissions");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.ProductListing", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductListingImages");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.Team", b =>
                {
                    b.Navigation("MarketPlaces");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FBDropshipper.Domain.Entities.User", b =>
                {
                    b.Navigation("AppTransactions");

                    b.Navigation("Catalogs");

                    b.Navigation("Notifications");

                    b.Navigation("TeamMember");

                    b.Navigation("TeamMemberPermissions");

                    b.Navigation("Teams");

                    b.Navigation("UserCard");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
